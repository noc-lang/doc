def controlFlow = {
    "<p>Noc has <a href=\"https://en.wikipedia.org/wiki/Control_flow\">control flow</a> thanks to the <a href=\"https://en.wikipedia.org/wiki/Pattern_matching\">pattern matching</a> with the <strong>case</strong> combinator. With control flow we can have a particular order for the expressions and the pattern matching allows to match to some patterns like <code>[\"john\"]</code> or <code>[_]</code>: </p>

<pre><code class=\"scala language-scala\">\"john\"
[
    [[\"john\"] [\"you are john!\"]]
    [[_] [\"you are not john!\"]]
] case print
</code></pre>

<pre><code class=\"scala language-scala\">\"you are john!\"
</code></pre>

<p>The <code>[_]</code> pattern run the default action (otherwise), it matches any pattern.</p>

<p>Example: <strong>(if combinator)</strong></p>

<h5 id=\"sourcestdboolnochttpsgithubcomnoclangnocblobmasterstdboolnoc\">Source: <a href=\"https://github.com/noc-lang/noc/blob/master/std/bool.noc\">std/bool.noc</a></h5>

<pre><code class=\"scala language-scala\">def if = {
  [
    [[True] [swap pop unquote]]
    [[False] [pop unquote]]
  ] case
}
</code></pre>

<pre><code class=\"scala language-scala\">load std:bool

def main = {
    [\"else\" print] [\"then\" print] True if
}
</code></pre>"
    "control-flow"
}