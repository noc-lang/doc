def datatypes = {
    "<p>Noc is dynamically typed language like the most concatenative languages (except some languages like Cat), it means that the type errors are reported at the runtime, also it&#39;s strongly typed (when types does not match it report at the runtime).</p>
<p>Example:</p>
<pre><code class=\"language-scala\">noc&gt; 1 &#39;1&#39; +
TypeError &quot;cannot operate with different types.&quot;
</code></pre>
<h3 id=\"primitive-types\">Primitive types</h3>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>Integer</td>
<td>An arbitrary precision integers, relative number</td>
<td><code>15</code>, <code>-86</code></td>
</tr>
<tr>
<td>Float</td>
<td>Double-precision floating point numbers (real numbers)</td>
<td><code>1.5</code>, <code>-3.9</code></td>
</tr>
<tr>
<td>String</td>
<td>UTF8 string</td>
<td><code>&quot;Hello,World!&quot;</code>, <br /> <code>&quot;Hello</code> <br /> <code>World!&quot;</code></td>
</tr>
<tr>
<td>Char</td>
<td>Char type</td>
<td><code>&#39;a&#39;</code>, <code>&#39;\n&#39;</code></td>
</tr>
<tr>
<td>Bool</td>
<td>Boolean type</td>
<td><code>True</code> or <code>False</code></td>
</tr>
<tr>
<td>Symbol</td>
<td>Symbol type</td>
<td><code>dup</code></td>
</tr>
<tr>
<td>Quote</td>
<td>Anonymous stack containing instructions</td>
<td><code>[1 2 3]</code> <code>[5 5 +]</code> <code>[[&#39;a&#39; 1] [&#39;b&#39; 2] [&#39;c&#39; 3]]</code></td>
</tr>
</tbody></table>"
"datatypes"
}