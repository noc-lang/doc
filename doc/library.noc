load fs
load str
load sys
load seq
load std:bool
load std:dict
load std:fs
load std:io
load std:list
load std:math
load std:stack
load std:string
load doc/table-of-contents.noc

def libInfo = {
    [
        "noc" # library name
        "mortim" # author
        "The entire Noc documentation generated by nocdoc." # description library
        "https://github.com/noc-lang/noc" # the repository library
        tableOfContentsLibrary
    ]
}

def prelude = {
    [
        # -- Stack-shuffler
        [dup] [pop] [zap] [cat] [rotNM]
        # Arithmetic operators
        [+] [-] [*] [/] [^]
        # I/O
        [print] [putstr] [putchar] [ask]
        # Boolean
        [>] [<] [>=] [<=] [and] [or]
        # Misc
        [id] [str] [int] [float] [bool] [help] [case] [trace]
    ]
    "prelude"
}

def internalFs = { [ [open] ] "fs" }
def internalStr = { [ [format] [tostr] [chars] ] "str" }
def internalSys = { [ [exit] [args] [catch] ] "sys" } 
def internalSeq = { [ [unquote] [pushr] [popr] [step] [fold] ] "seq" }

def stdBool = { [ [if] [not] [eq] [==] [!=] ] "std-bool" }
def stdDict = { [ [keys] [values] ] "std-dict"}
def stdFs = { [ [write] [read] [append] ] "std-fs"}
def stdIo = { [ [putstrln] ] "std-io" }
def stdList = { [ [len] [findByIndex] [enumerate] [filter] ] "std-list"}
def stdMath = { [ [pi] [mod] [%] [sqrt] ] "std-math"}
def stdStack = { [ [quote] [rotNR] [rotNL] [swap] [rot] [<>] ] "std-stack"}
def stdString = { [ [$] ] "std-string" }

def generateModules = {
    dup
    [
        [[[]] [pop]]
        [[_] [popr libInfo 3 1 rotNM generateModule generateModules]]
    ] case
}